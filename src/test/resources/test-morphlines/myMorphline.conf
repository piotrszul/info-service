# Specify an array of one or more morphlines, each of which defines an ETL
# transformation chain. A morphline consists of one or more (potentially
# nested) commands. A morphline is a way to consume records (e.g. Flume events,
# HDFS files or blocks), turn them into a stream of records, and pipe the stream
# of records through a set of easily configurable transformations on the way to
# a target application such as Solr.
morphlines : [
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : morphline1

    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this
    # morphline.
    importCommands : [ "org.kitesdk.morphline.stdlib.**", "org.kitesdk.morphline.json.**" ]

    commands : [
      
      {
        readJson {}
      }

      # log the record at DEBUG level to SLF4J
      { logDebug { format : "json record: {}", args : ["@{}"] } }

      {
        extractJsonPaths {
          flatten : true
          paths : {
            id : /id            
            text : /text      
            user_friends_count : /user_friends_count
            user_location : /user_location
            user_description : /user_description
            user_statuses_count : /user_statuses_count
            user_followers_count : /user_followers_count
            user_name : /user_name
            user_screen_name : /user_screen_name
            created_at : /created_at
            retweet_count : /retweet_count
            retweeted : /retweeted
            in_reply_to_user_id : /in_reply_to_user_id
            source : /source
            in_reply_to_status_id : /in_reply_to_status_id
            media_url_https : /media_url_https
            expanded_url : /expanded_url
         }
        }
      }
      
      {
        convertTimestamp {
              field : created_at
              inputFormats : ["EEE MMM dd HH:mm:ss ZZZZZ yyyy"]
              inputTimezone : UTC
              outputFormat : "yyyy-MM-dd HH:mm:ss"
              outputTimezone : UTC
          }
      }
      
      {
         removeFields {
          whitelist: ["regex:[^_].*"]
         }
      }

        {
          java { 
            imports : """
              import au.gov.dhs.morphlines.Morphlines;
            """
            code : """   
                Morphlines.addSentiment(record, "text", logger);
                Morphlines.toJson(record, logger);
                return child.process(record);
            """
            } 
        }
 
       # log the record at DEBUG level to SLF4J
      { logDebug { format : "output record: {}", args : ["@{}"] } }

    ]
  }
]